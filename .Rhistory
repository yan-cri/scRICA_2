#' ## ------------------------------------------------------------------------------------ ##
makeGMMptPlots <- function(pseudoRes, plotFnamePrefix = 'TEST') {
gmmPlotTheme       <- theme(plot.title = element_text(size = 16, hjust = 0.5),
axis.title = element_text(size = 20),
axis.text = element_text(size = 25),
legend.position="right",
legend.text = element_text(size = 14) )
## ---
R1  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'PCApc1', yLabel = 'PC1', colCol = 'GMM')
# R1  <- R1 + ggtitle(paste(sprintf('PCA: %s', clusterName))) + theme(plot.title = element_text(hjust=0.5))
R1  <- R1 + gmmPlotTheme + NoLegend()
## -
R2  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'dmPc1', yLabel = 'DC1', colCol = 'GMM')
R2  <- R2 + gmmPlotTheme
## -
# df_pseudotime           <- as.data.frame(as.data.frame(colData(pseudoRes$sceObj))[, c("ptPC1", "dmapDptRank", "slingPseudotime_1")]) ##consistent with tutorial exploration with rank result for PCA and DM
# colnames(df_pseudotime) <- c("PCA", "Diffusion", "Slingshot")
# pdf(file = sprintf('%s_pseudotime_correlation.pdf', plotname), width = 6, height = 6.5)
# corrplot.mixed(cor(df_pseudotime, use = "na.or.complete"),
#                order = "hclust", tl.col = "black",
#                # main = "Correlation matrix for pseudotime results",
#                mar = c(0, 0, 2, 3))
# dev.off()
## -
p <- plot_grid(R1, R2, align = 'h', ncol = 2, nrow = 1)
save_plot(sprintf('ptGMM_%s_plots.pdf', plotFnamePrefix), p, base_height = 5, base_width = 10)
## ---
}
makeGMMptPlots(pseudoRes = res2, plotFnamePrefix = 'test2')
?plot_grid
plot_grid(R1, R2, align = 'h', ncol = 2, nrow = 1, rel_widths = c(1,2))
plot_grid(R1, R2, align = 'h', ncol = 2, nrow = 1, rel_widths = c(1,1.2))
#' @importFrom corrplot corrplot.mixed
#'
#' @keywords plotPseudotime
#' @examples plotPseudotime()
#' @export
#'
#' @return
#' 2 plots (correlation plots and 3 combined pseudotime plots) with this specified cluster name in input 'pseudoRes$clusterName'
#'
#' ## ------------------------------------------------------------------------------------ ##
makeGMMptPlots <- function(pseudoRes, plotFnamePrefix = 'TEST') {
gmmPlotTheme       <- theme(plot.title = element_text(size = 16, hjust = 0.5),
axis.title = element_text(size = 20),
axis.text = element_text(size = 25),
legend.position="right",
legend.text = element_text(size = 14) )
## ---
R1  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'PCApc1', yLabel = 'PC1', colCol = 'GMM')
# R1  <- R1 + ggtitle(paste(sprintf('PCA: %s', clusterName))) + theme(plot.title = element_text(hjust=0.5))
R1  <- R1 + gmmPlotTheme + NoLegend()
## -
R2  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'dmPc1', yLabel = 'DC1', colCol = 'GMM')
R2  <- R2 + gmmPlotTheme
## -
# df_pseudotime           <- as.data.frame(as.data.frame(colData(pseudoRes$sceObj))[, c("ptPC1", "dmapDptRank", "slingPseudotime_1")]) ##consistent with tutorial exploration with rank result for PCA and DM
# colnames(df_pseudotime) <- c("PCA", "Diffusion", "Slingshot")
# pdf(file = sprintf('%s_pseudotime_correlation.pdf', plotname), width = 6, height = 6.5)
# corrplot.mixed(cor(df_pseudotime, use = "na.or.complete"),
#                order = "hclust", tl.col = "black",
#                # main = "Correlation matrix for pseudotime results",
#                mar = c(0, 0, 2, 3))
# dev.off()
## -
p <- plot_grid(R1, R2, align = 'h', ncol = 2, nrow = 1, rel_widths = c(1,1.2))
save_plot(sprintf('ptGMM_%s_plots.pdf', plotFnamePrefix), p, base_height = 5, base_width = 10)
## ---
}
makeGMMptPlots(pseudoRes = res2, plotFnamePrefix = 'test2')
#' @importFrom corrplot corrplot.mixed
#'
#' @keywords plotPseudotime
#' @examples plotPseudotime()
#' @export
#'
#' @return
#' 2 plots (correlation plots and 3 combined pseudotime plots) with this specified cluster name in input 'pseudoRes$clusterName'
#'
#' ## ------------------------------------------------------------------------------------ ##
makeGMMptPlots <- function(pseudoRes, plotFnamePrefix = 'TEST') {
gmmPlotTheme       <- theme(plot.title = element_text(size = 16, hjust = 0.5),
axis.title = element_text(size = 20),
axis.text = element_text(size = 25),
legend.position="right",
legend.text = element_text(size = 20) )
## ---
R1  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'PCApc1', yLabel = 'PC1', colCol = 'GMM')
# R1  <- R1 + ggtitle(paste(sprintf('PCA: %s', clusterName))) + theme(plot.title = element_text(hjust=0.5))
R1  <- R1 + gmmPlotTheme + NoLegend()
## -
R2  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'dmPc1', yLabel = 'DC1', colCol = 'GMM')
R2  <- R2 + gmmPlotTheme
## -
# df_pseudotime           <- as.data.frame(as.data.frame(colData(pseudoRes$sceObj))[, c("ptPC1", "dmapDptRank", "slingPseudotime_1")]) ##consistent with tutorial exploration with rank result for PCA and DM
# colnames(df_pseudotime) <- c("PCA", "Diffusion", "Slingshot")
# pdf(file = sprintf('%s_pseudotime_correlation.pdf', plotname), width = 6, height = 6.5)
# corrplot.mixed(cor(df_pseudotime, use = "na.or.complete"),
#                order = "hclust", tl.col = "black",
#                # main = "Correlation matrix for pseudotime results",
#                mar = c(0, 0, 2, 3))
# dev.off()
## -
p <- plot_grid(R1, R2, align = 'h', ncol = 2, nrow = 1, rel_widths = c(1,1.2))
save_plot(sprintf('ptGMM_%s_plots.pdf', plotFnamePrefix), p, base_height = 5, base_width = 10)
## ---
}
makeGMMptPlots(pseudoRes = res2, plotFnamePrefix = 'test2')
#' @importFrom corrplot corrplot.mixed
#'
#' @keywords plotPseudotime
#' @examples plotPseudotime()
#' @export
#'
#' @return
#' 2 plots (correlation plots and 3 combined pseudotime plots) with this specified cluster name in input 'pseudoRes$clusterName'
#'
#' ## ------------------------------------------------------------------------------------ ##
makeGMMptPlots <- function(pseudoRes, plotFnamePrefix = 'TEST') {
gmmPlotTheme       <- theme(plot.title = element_text(size = 16, hjust = 0.5),
axis.title = element_text(size = 20),
axis.text = element_text(size = 25),
legend.position="right",
legend.text = element_text(size = 20) )
## ---
R1  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'PCApc1', yLabel = 'PC1', colCol = 'GMM')
# R1  <- R1 + ggtitle(paste(sprintf('PCA: %s', clusterName))) + theme(plot.title = element_text(hjust=0.5))
R1  <- R1 + gmmPlotTheme + NoLegend()
## -
R2  <- plotPseudotime(pseudoRes = pseudoRes, xCol = 'slingPseudotime_1', xLabel = 'slingshot pseudotime', yCol = 'dmPc1', yLabel = 'DC1', colCol = 'GMM')
R2  <- R2 + gmmPlotTheme + NoLegend()
## -
# df_pseudotime           <- as.data.frame(as.data.frame(colData(pseudoRes$sceObj))[, c("ptPC1", "dmapDptRank", "slingPseudotime_1")]) ##consistent with tutorial exploration with rank result for PCA and DM
# colnames(df_pseudotime) <- c("PCA", "Diffusion", "Slingshot")
# pdf(file = sprintf('%s_pseudotime_correlation.pdf', plotname), width = 6, height = 6.5)
# corrplot.mixed(cor(df_pseudotime, use = "na.or.complete"),
#                order = "hclust", tl.col = "black",
#                # main = "Correlation matrix for pseudotime results",
#                mar = c(0, 0, 2, 3))
# dev.off()
## -
p <- plot_grid(R1, R2, align = 'h', ncol = 2, nrow = 1, rel_widths = c(1,1))
save_plot(sprintf('ptGMM_%s_plots.pdf', plotFnamePrefix), p, base_height = 5, base_width = 10)
## ---
}
makeGMMptPlots(pseudoRes = res2, plotFnamePrefix = 'test2')
getwd()
document()
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
newAnnotationRscriptName = NULL
is.null(newAnnotationRscriptName)
expCondSepName = NULL
is.null(expCondSepName)
resDir <- paste(getwd(), 'test', sep = '/')
paste(sprintf('%s/expCond_%s', resDir, 'org' ))
library(devtools)
document()
document()
document()
setwd('..')
install('scRICA/')
?scale_color_tableau
scale_color_tableau(1)
scale_color_tableau(palette = "Tableau 10")
library(ggthemes)
scale_color_tableau(palette = "Tableau 10")
pdf(file = sprintf('ptGMM_%s_lineage.pdf', plotname), width = 4.5, height = 5.5)
plot(df2plot, col = selectedcol[pseudoRes$sceObj$GMM][pseudoRes$sceObj$GMM], pch=16, asp = 1)
lines(SlingshotDataSet(pseudoRes$slingshotRes), lwd=2, type = 'lineages', col = 'black')
dev.off()
??SlingshotDataSet
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('..')
getwd()
setwd('scRIC_development/scRICA/')
document()
document()
setwd('..')
install('scRICA')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA')
document()
document()
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA')
document()
document()
document()
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd()
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
ptGmmClusterResNames  <- c()
ptGmmClusterResNames  <- c(ptGmmClusterResNames, 1)
ptGmmClusterResNames
ptGmmClusterResNames  <- c(ptGmmClusterResNames, 4)
ptGmmClusterResNames
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
}
a <- list()
m <- list('m1'=1, 'm2'=4)
a <- m
names(a) <- 'mMessage'
a
a[[1]] <- m
a
a = list()
a[[1]] = m
a
str(a)
names(a) <- c('mMessage')
a$mMessage
b = list()
b[[1]] = a
names(b) <- c('addingA')
b
length(b$addingA)
b$addingA$mMessage
library(devtools)
document()
document()
setwd('..')
install('scRICA')
library(devtools)
document()
document()
setwd('..')
install('scRICA')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
document()
document()
setwd('..')
install('scRICA/')
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
cellcluster <- 'P/V'
cellclusterName              <- cellcluster
gsub('/','', cellclusterName)
gsub('/','_', cellclusterName)
gsub('/','', cellclusterName)
cellclusterName              <- 'P/V-NK'
gsub('/|-','', cellclusterName)
cellclusterName              <- 'P/V-NK.C'
gsub('/|-|[.]','', cellclusterName)
library(devtools)
document()
document()
setwd('..')
install('scRICA')
## This script is used to conduct pseudotime analysis
rm(list = ls())
## ---
suppressPackageStartupMessages(library(scRICA))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(SingleCellExperiment))
currentDir          <- getwd() ##getwd()  = '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration'
## ---------------------------------------------------------------------------------------
FTintegrateResDir     <- paste(getwd(), 'batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results', sep = '/')
paste(sprintf('%s/ptGmmResAnnoShotI.Rdata', FTintegrateResDir))
currentDir <- '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration'
## ---------------------------------------------------------------------------------------
FTintegrateResDir     <- paste(getwd(), 'batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results', sep = '/')
paste(sprintf('%s/ptGmmResAnnoShotI.Rdata', FTintegrateResDir))
setwd('/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration')
## ---------------------------------------------------------------------------------------
FTintegrateResDir     <- paste(getwd(), 'batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results', sep = '/')
paste(sprintf('%s/ptGmmResAnnoShotI.Rdata', FTintegrateResDir))
load('/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration/batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results/results_wNewAnnotation_pseudoTime/expCond_tissueSep_newAnno_abbrevName/expCondLevel_A_cluster_SM_fnPseudoTimeRes.Rdata')
ls()
slingshotPtOrder  <- order(sceObj$slingPseudotime_1, na.last = NA)
length(slingshotPtOrder)
head(slingshotPtOrder)
heatdata          <- as.matrix(assays(sceObj)$logcounts[rankGene[1:100], slingshotPtOrder])
library(SingleCellExperiment)
heatdata          <- as.matrix(assays(sceObj)$logcounts[rankGene[1:100], slingshotPtOrder])
ls()
rankGene     <- rownames(sceObjfitGamATres[order(sceObjfitGamATres$pvalue), ])
heatdata          <- as.matrix(assays(sceObj)$logcounts[rankGene[1:100], slingshotPtOrder])
head(heatdata)
head(heatdata[,1:3])
dim(heatdata)
length(slingshotPtOrder)
head(slingshotPtOrder)
head(sceObj$GMM)
table(sceObj$GMM)
heatclus          <- sceObj$GMM[slingshotPtOrder]
table(sceObj$GMM)
table(sceObj$GMM)
head(sceObj$GMM)
head(heatclus)
RColorBrewer::brewer.pal(length(levels(factor(heatclus))),"Set1")[heatclus]
RColorBrewer::brewer.pal(length(levels(factor(heatclus))),"Set1")
length(levels(factor(heatclus)))
## color options
palettes         <- ggthemes::ggthemes_data[["tableau"]][["color-palettes"]][["regular"]]
selectedcol      <- palettes$`Tableau 10`%>% pull(value)
library(dplyr)
selectedcol
palettes         <- ggthemes::ggthemes_data[["tableau"]][["color-palettes"]][["regular"]]
selectedcol      <- palettes$`Tableau 10`%>% pull(value)
selectedcol
levels(factor(heatclus))
selectedcol[length(levels(factor(heatclus))),"Set1"]
selectedcol[length(levels(factor(heatclus)))]
selectedcol[1:length(levels(factor(heatclus)))]
heatmap.2(as.matrix(heatdata), Rowv=T, Colv=F, distfun=dist,
scale="row", hclustfun =hclust, dendrogram="row",
# srtCol = 45, adjCol=c(1, 0.6),
cexCol=0.1, labCol = NULL,
# col=colorpanel(100, "#191970", "#FFF68F", "#EE7621"),
key.title= NA, key.xlab = 'scaled log counts',
key=TRUE, symkey=FALSE, keysize = 1,
key.par = list(cex.lab=1, cex.axis = 1),
density.info="none", trace="none", cexRow=1,
# margins= marginsVals,
ColSideColors= selectedcol[1:length(levels(factor(heatclus)))][heatclus],
# ColSideColors= RColorBrewer::brewer.pal(length(levels(factor(heatclus))),"Set1")[heatclus]
# ,lhei = heatmaplheiVals, lwid = heatmaplwidVals
)
library(gplots)
heatmap.2(as.matrix(heatdata), Rowv=T, Colv=F, distfun=dist,
scale="row", hclustfun =hclust, dendrogram="row",
# srtCol = 45, adjCol=c(1, 0.6),
cexCol=0.1, labCol = NULL,
# col=colorpanel(100, "#191970", "#FFF68F", "#EE7621"),
key.title= NA, key.xlab = 'scaled log counts',
key=TRUE, symkey=FALSE, keysize = 1,
key.par = list(cex.lab=1, cex.axis = 1),
density.info="none", trace="none", cexRow=1,
# margins= marginsVals,
ColSideColors= selectedcol[1:length(levels(factor(heatclus)))][heatclus],
# ColSideColors= RColorBrewer::brewer.pal(length(levels(factor(heatclus))),"Set1")[heatclus]
# ,lhei = heatmaplheiVals, lwid = heatmaplwidVals
)
library(devtools)
getwd()
document()
setwd('.')
setwd('..')
getwd()
install('scRICA')
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(devtools)
document()
setwd('..')
install('scRICA/')

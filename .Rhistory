print(sprintf("A total of %s genes will be ploted", length(unique(markerGenesPrep$Gene))))
duplicated(markerGenesPrep$Gene)
sum(duplicated(markerGenesPrep$Gene))>0
sum(duplicated(markerGenesPrep$Gene))
markerGenesPrep$Gene[duplicated(markerGenesPrep$Gene)]
paste(markerGenesPrep$Gene[duplicated(markerGenesPrep$Gene)], collapse = ', ' )
if (sum(duplicated(markerGenesPrep$Gene))>0) print(sprintf("%s genes are duplicated genes, they are: %s", sum(duplicated(markerGenesPrep$Gene)), paste(markerGenesPrep$Gene[duplicated(markerGenesPrep$Gene)], collapse = ', ' ) ))
library(devtools)
document()
document()
remove.packages('scRICA')
.rs.restartR()
library(devtools)
setwd('..')
getwd()
install('scRICA/')
library(scRICA)
getGoiFeatureplot
?as.SingleCellExperiment
Seurat::as.SingleCellExperiment()
?reducedDim
?scater::reducedDim
## ------------------------------------------------------------------------------------ ##
## read in single cell data
deng_SCE <- readRDS(file = 'deng-reads.rds')
scater::DiffusionMap
?scater::DiffusionMap
library(destiny)
?reducedDim
destiny::DPT
?destiny::DPT
?eigenvectors
?rank
?Sys.time
?slingshot::slingshot
?dplyr::rename_at
?match
?aes
?ggplot
?ggbeeswarm::geom_quasirandom
?ggthemes::scale_color_tableau
?ggthemes::theme_classic
?ggbeeswarm::theme_classic
?vipor::theme_classic
?theme_classic
?labs
?theme
?cor
?corrplot.mixed
?corrplot::corrplot.mixed
?plot_grid
?savePlot
?save_plot
?dev.off
library(devtools)
.rs.restartR()
getwd()
devtools::document()
remove.packages('scRICA')
setwd('..')
getwd()
install('scRICA/')
library(devtools)
document()
document()
library(devtools)
document()
document()
document()
document()
.rs.restartR()
.rs.restartR()
setwd('..')
install('scRICA/')
library(scRICA)
?countReadin
?clusterSummaryReplot
?clusterSummaryReplot
?calcFnPseudo
?getClusterSummaryReplot
?calcPCApseudo
?plotPseudotime
?base::rank
x2 <- c(3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5)
rank(x2)
x2
?eigenvectors
?rank
x <- c(7,5,3,1)
rank(x)
library(devtools)
getwd()
document()
getwd('..')
setwd('..')
install('scRICA/')
## ---
# library(devtools)
# install('/Users/yanli/Desktop/scRIC_development/scRICA/')
library('scRICA')
deng_SCE       <- readRDS(file = '/Users/yanli/Desktop/scRIC_development/scRICA_fnPseudotime_exploration/deng-reads.rds')
deng_SCE$cell_type2 <- factor(deng_SCE$cell_type2,
levels = c("zy", "early2cell", "mid2cell", "late2cell",
"4cell", "8cell", "16cell", "earlyblast", "midblast",
"lateblast"))
res2 <- calcPCApseudo(obj = deng_SCE)
library(scater)
library(destiny)
library(slingshot)
library(Seurat)
res2 <- calcPCApseudo(obj = deng_SCE)
?BiocSingular::runPCA
sceObj = deng_SCE
BiocSingular::runPCA(sceObj, ncomponents = 50)
sceObj           <- BiocSingular::runPCA(sceObj, rank = 50)
sceObj           <- BiocSingular::runPCA(sceObj, rank = 50, ncomponents = 50)
BiocSingular::runPCA(sceObj)
BiocSingular::runPCA(sceObj, rank=50)
library(scater)
BiocSingular::runPCA(sceObj, rank=50)
BiocSingular::runPCA(sceObj)
BiocSingular::runPCA(sceObj, ncomponents = 50)
BiocSingular::runPCA(sceObj, ncomponents = 50, rank = 5)
BiocSingular::runPCA(sceObj, ncomponents = 50, rank = 50)
getwd()
remove.packages('scRICA')
.rs.restartR()
library(devtools)
getwd()
document()
document()
setwd('..')
getwd()
install('scRICA/')
library(scRICA)
calcPCApseudo
deng_SCE
deng_SCE       <- readRDS(file = '/Users/yanli/Desktop/scRIC_development/scRICA_fnPseudotime_exploration/deng-reads.rds')
deng_SCE$cell_type2 <- factor(deng_SCE$cell_type2,
levels = c("zy", "early2cell", "mid2cell", "late2cell",
"4cell", "8cell", "16cell", "earlyblast", "midblast",
"lateblast"))
calcPCApseudo(obj = deng_SCE)
getwd()
library(devtools)
library(devtools)
getwd()
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
calcPCApseudo
library(devtools)
library(devtools)
document()
document()
remove.packages('scRICA')
getwd()
setwd('..')
install('scRICA/')
library(scRICA)
calcPCApseudo
getwd()
remove.packages('scRICA')
.rs.restartR()
calcPCApseudo
library(scRICA)
library(scRICA)
getwd()
library(scRICA)
library('scRICA')
## ---
library(devtools)
document()
document()
getwd()
setwd('..')
install('scRICA/')
remove.packages('scRICA')
.rs.restartR()
library('scRICA')
currentDir              <- getwd()
library('scRICA')
library(scRICA)
calcPCApseudo
library(devtools)
document()
document()
setwd('..')
remove.packages('scRICA')
.rs.restartR()
install('scRICA/')
library(scRICA)
calcObjPCApseudo
?calcObjPCApseudo
?calcPCApseudo
.rs.restartR()
remove.packages('scRICA')
remove.packages('scRICA')
.rs.restartR()
setwd('scRICA/')
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
?calcObjPCApseudo
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
?calcObjPCApseudo
calcObjPCApseudo
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
?calcObjPCApseudo
?calcObjPCApseudo
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
?calcObjPCApseudo
resDirName              <- strsplit(x = resDir, split = '/')[[1]][length(strsplit(x = resDir, split = '/')[[1]])]
## ------------------------------------------------------------------------------------ ##
## 2. check calcPCApseudo()
integrateResDir     <- '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration/batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results'
resDir = integrateResDir
strsplit(x = resDir, split = '/')[[1]]
length(strsplit(x = resDir, split = '/')[[1]])
## ------------------------------------------------------------------------------------ ##
## 2. check calcPCApseudo()
integrateResDir     <- '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration/batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results'
resDir = integrateResDir
rdsFname                <- paste(resDir, "RDS_Dir/analysis_results_integration_results.rds", sep = '/' )
## above is the same as other functions defined as below
# resDirName              <- strsplit(x = resDir, split = '/')[[1]][length(strsplit(x = resDir, split = '/')[[1]])]
# rdsFname                <- paste(resDir, sprintf("RDS_Dir/%s.rds", resDirName), sep = '/' )
## --
# print(sprintf('85858 rdsFname is %s', rdsFname))
if (!file.exists(rdsFname)) stop("Please execute getClusterMarker() to conduct integration analysis before running getClusterSummaryReplot().")
seuratObjFinal          <<- readRDS(file = as.character(rdsFname))
expCondSepName = 'tissueSep'
expCondSepName = 'patientSep'
expCondName2change = 'A|F|I'
## -------------------------------------------------------------------------------------
## update 'seuratObjFinal@meta.data$expCond' and create corresponding 'plotResDir' for dotplot to save
print(sprintf("expCondSep is '%s'", expCondSepName))
if (expCondSepName == 'org') {
seuratObjFinal                     <- seuratObjFinal
} else if (expCondSepName == 'comb') {
seuratObjFinal@meta.data$expCond   <- Seurat::Idents(seuratObjFinal)
} else {
seuratObjFinal@meta.data$expCond   <- gsub(pattern = as.character(expCondName2change), replacement = '', x = seuratObjFinal@meta.data$expCond)
}
print(table(seuratObjFinal@meta.data$expCond))
subsetCond = 'expCond'
if (subsetCond == 'idents') {
print(table(Seurat::Idents(seuratObjFinal)))
} else if (subsetCond == 'expCond') {
print(table(seuratObjFinal@meta.data$expCond))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
print(sprintf('START functional pseudo time trajectory analysis for subset %s at %s', paste(subsetClusters, sep = ','), subsetCond ))
subsetClusters <- c('3041, 3061')
print(sprintf('START functional pseudo time trajectory analysis for subset %s at %s', paste(subsetClusters, sep = ','), subsetCond ))
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at %s", paste(subsetClusters, sep = ','), subsetCond ))
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at identified cell clusters shown as below", paste(subsetClusters, sep = ',')  ))
print(table(Seurat::Idents(seuratObjFinal)))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at experimental conditions shown as below", paste(subsetClusters, sep = ',') ))
print(table(seuratObjFinal@meta.data$expCond))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, sep = ',') ))
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at identified cell clusters shown as below", paste(subsetClusters, sep = ',')  ))
print(table(Seurat::Idents(seuratObjFinal)))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, sep = ',') ))
print(table(seuratObjFinal@meta.data$expCond))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
colnames(Seurat::Idents(seuratObjFinal))
names(Seurat::Idents(seuratObjFinal))
table(Seurat::Idents(seuratObjFinal))
colnames(table(Seurat::Idents(seuratObjFinal)))
names(table(Seurat::Idents(seuratObjFinal)))
names(table(seuratObjFinal@meta.data$expCond))
subsetClusters <- c('0', '1', '2')
subsetCond = 'idents'
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at identified cell clusters shown as below", paste(subsetClusters, sep = ',')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal)))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, sep = ',') ))
print(table(seuratObjFinal@meta.data$expCond))
if (subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
subsetClusters
subsetClusters
names(table(Seurat::Idents(seuratObjFinal)))
match(subsetClusters, names(table(Seurat::Idents(seuratObjFinal))))
grepl(subsetClusters, names(table(Seurat::Idents(seuratObjFinal))))
grep(subsetClusters, names(table(Seurat::Idents(seuratObjFinal))))
subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal)))
all(names(table(Seurat::Idents(seuratObjFinal))))
all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))
subsetClusters <- c('0', '1', '32')
all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at identified cell clusters shown as below", paste(subsetClusters, sep = ',')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, sep = ',') ))
print(table(seuratObjFinal@meta.data$expCond))
if (all(subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond)))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
subsetClusters
paste(subsetClusters, collapse = ', ')
subsetClusters
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for 'subset' %s at identified cell clusters shown as below", paste(subsetClusters, collapse = ', ')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, collapse = ', ') ))
print(table(seuratObjFinal@meta.data$expCond))
if (all(subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond)))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for subset '%s' at identified cell clusters shown as below", paste(subsetClusters, collapse = ', ')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (!all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, collapse = ', ') ))
print(table(seuratObjFinal@meta.data$expCond))
if (!all(subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond)))) stop(sprintf("Provided 'subsetClusters' is/are not in above, please edit it correspondingly."))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
subsetClusters = c('0', '1', '2')
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for subset '%s' at identified cell clusters shown as below", paste(subsetClusters, collapse = ', ')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (!all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))) stop(sprintf("Provided 'subsetClusters' is/are not in above clusters, please edit it correspondingly."))
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, collapse = ', ') ))
print(table(seuratObjFinal@meta.data$expCond))
if (!all(subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond)))) stop(sprintf("Provided 'subsetClusters' is/are not in above clusters, please edit it correspondingly."))
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
## -
seuratObjFinalSubset               <- subset(seuratObjFinal, idents = subsetClusters)
seuratObjFinalSubset
print(table(Seurat::Idents(seuratObjFinal)))
print(table(Seurat::Idents(seuratObjFinalSubset)))
print(table(seuratObjFinal@meta.data$expCond))
subsetClusters = c('3041', '3061')
seuratObjFinalSubset               <- subset(seuratObjFinal, expCond = subsetClusters)
seuratObjFinalSubset               <- subset(seuratObjFinal, expCond == subsetClusters)
seuratObjFinalSubset               <- subset(seuratObjFinal, subsetClusters %in% expCond )
print(table(seuratObjFinalSubset@meta.data$expCond))
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, collapse = ', ') ))
seuratObjFinalSubset               <- subset(seuratObjFinal, subset = expCond == subsetClusters )
print(table(seuratObjFinalSubset@meta.data$expCond))
options(warn=-1)
seuratObjFinalSubset               <- subset(seuratObjFinal, subset = expCond == subsetClusters )
print(table(seuratObjFinalSubset@meta.data$expCond))
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for subset '%s' at identified cell clusters shown as below", paste(subsetClusters, collapse = ', ')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (!all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))) stop(sprintf("Provided 'subsetClusters' is/are not in above clusters, please edit it correspondingly."))
## -
seuratObjFinalSubset               <- subset(seuratObjFinal, idents = subsetClusters)
print(sprintf("Subsetted objects are shown as below:"))
print(table(Seurat::Idents(seuratObjFinalSubset)))
print('-=-=-=-=-')
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, collapse = ', ') ))
print(table(seuratObjFinal@meta.data$expCond))
if (!all(subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond)))) stop(sprintf("Provided 'subsetClusters' is/are not in above clusters, please edit it correspondingly."))
seuratObjFinalSubset               <- subset(seuratObjFinal, subset = expCond == subsetClusters )
print(sprintf("Subsetted objects are shown as below:"))
print(table(seuratObjFinalSubset@meta.data$expCond))
print('-=-=-=-=-')
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
subsetCond = 'expCond'
if (subsetCond == 'idents') {
print(sprintf("START functional pseudo time trajectory analysis for subset '%s' at identified cell clusters shown as below", paste(subsetClusters, collapse = ', ')  ))
print(table(Seurat::Idents(seuratObjFinal)))
if (!all(subsetClusters %in% names(table(Seurat::Idents(seuratObjFinal))))) stop(sprintf("Provided 'subsetClusters' is/are not in above clusters, please edit it correspondingly."))
## -
seuratObjFinalSubset               <- subset(seuratObjFinal, idents = subsetClusters)
print(sprintf("Subsetted objects are shown as below:"))
print(table(Seurat::Idents(seuratObjFinalSubset)))
print('-=-=-=-=-')
} else if (subsetCond == 'expCond') {
print(sprintf("START functional pseudo time trajectory analysis for subset ('%s') at experimental conditions shown as below", paste(subsetClusters, collapse = ', ') ))
print(table(seuratObjFinal@meta.data$expCond))
if (!all(subsetClusters %in% names(table(seuratObjFinal@meta.data$expCond)))) stop(sprintf("Provided 'subsetClusters' is/are not in above clusters, please edit it correspondingly."))
seuratObjFinalSubset               <- subset(seuratObjFinal, subset = expCond == subsetClusters )
print(sprintf("Subsetted objects are shown as below:"))
print(table(seuratObjFinalSubset@meta.data$expCond))
print('-=-=-=-=-')
} else {
stop("Please provide 'subsetCond' in either 'idents' or 'expCond'")
}
?calcPCApseudo
head(seuratObjFinalSubset@meta.data)
print(table(seuratObjFinalSubset@meta.data$expCond))
obj = seuratObjFinalSubset
## ------
## 0. decide the obj input and change into 'SingleCellExperiment' object
if (class(obj) == "Seurat") {
sceObj         <- Seurat::as.SingleCellExperiment( obj )
} else if (class(deng_SCE) == "SingleCellExperiment") {
sceObj         <- obj
} else {
stop("please provide either Seurat or SingleCellExperiment object")
}
print(sceObj)
head(colData(sceObj))
library(SingleCellExperiment)
head(colData(sceObj))
?table
getwd()
library(devtools)
library(devtools)
document()
document()
document()
document()
library(devtools)
document()
document()
document()
document()
document()
document()
getwd()
setwd('..')
install('scRICA/')
library(scRICA)
?calcObjPCApseudo
calcObjPCApseudo
SeuratObject::subset
?SeuratObject::subset
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
calcObjPCApseudo
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(scRICA)
calcObjPCApseudo
library(devtools)
install.packages("cowplot")
install.packages("ggbeeswarm")
install.packages("ggthemes")
install.packages("reshape2")
install.packages("xlsx")
setwd('scRICA')
getwd()
docum
library(devtools)
document()
getwd()
setwd('..')
library(devtools)
document()
remove.packages('scRICA')
document()
setwd('..')
install('scRICA/')
library(scRICA)
?calcPCApseudo

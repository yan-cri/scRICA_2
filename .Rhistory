newAnnotation
newAnnotation = 'F'
clusterReOrder
## ------
## update results directory if new annotation is used
if (newAnnotation) {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wNewAnnotation', sep = '/')
} else {
if (clusterReOrder) {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wOrgClusterAnnotation_Reorder', sep = '/')
} else {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wOrgClusterAnnotation', sep = '/')
}
}
## --------------------------------------------
if (newAnnotation) {
## Assign cell type identity to clusters
## redefine the level of Idents on the y-axis can be adjusted here by inputting order for cell annotation
source(as.character(newAnnotationRscriptName))
} else {
if (clusterReOrder) {
Idents(seuratObjFinal) <- factor(levels(Idents(seuratObjFinal)), levels = as.character(print('Identified cell clusters are re-ordered')))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
}
clusterReOrder
newAnnotation
clusterReOrder
if (clusterReOrder) {
Idents(seuratObjFinal) <- factor(levels(Idents(seuratObjFinal)), levels = as.character(print('Identified cell clusters are re-ordered')))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
clusterReOrder <- as.logical(T)
if (clusterReOrder) {
Idents(seuratObjFinal) <- factor(levels(Idents(seuratObjFinal)), levels = as.character(print('Identified cell clusters are re-ordered')))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
table(Idents(seuratObjFinal))
seuratObjFinal
seuratObjFinal          <<- readRDS(file = as.character(rdsFname))
print(table(Idents(seuratObjFinal)))
if (clusterReOrder) {
Idents(seuratObjFinal) <- factor(levels(Idents(seuratObjFinal)), levels = as.character(reorderedClusters))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
#' @importFrom dplyr summarise
#' @importFrom grDevices dev.off
#' @importFrom grDevices pdf
#'
#' @keywords getExpCondClusterMarkers
#' @examples getExpCondClusterMarkers()
#' @export
#' @return
#' a list item including 3 elements:
## -------------------------------------------------------------------------------------- ##
getExpCondClusterMarkers <- function(resDir, newAnnotation, newAnnotationRscriptName, clusterReOrder, reorderedClusters, expCondSepName, expCondName2change, pAdjValCutoff, topNo) {
options(java.parameters = "-Xmx32000m")
if (missing(topNo)) topNo = 10
if (missing(clusterReOrder)) clusterReOrder = as.logical(F)
if (missing(reorderedClusters)) reorderedClusters <- ''
if (clusterReOrder) {
if (length(reorderedClusters)!=length(levels(Idents(seuratObjFinal)))) stop("Please provide corresponding reorderedClusters options")
}
## --------------------------------------------
rdsFname                <- paste(resDir, "RDS_Dir/analysis_results_integration_results.rds", sep = '/' )
# print(sprintf('85858 rdsFname is %s', rdsFname))
if (!file.exists(rdsFname)) stop("Please execute getClusterMarker() to conduct integration analysis before running getClusterSummaryReplot().")
seuratObjFinal          <<- readRDS(file = as.character(rdsFname))
print('Done for RDS readin')
## ------
## update results directory if new annotation is used
if (newAnnotation) {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wNewAnnotation', sep = '/')
} else {
if (clusterReOrder) {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wOrgClusterAnnotation_Reorder', sep = '/')
} else {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wOrgClusterAnnotation', sep = '/')
}
}
if (!dir.exists(resDir)) dir.create(resDir)
print(sprintf('Cluster marker genes identification on cell clusters with respect experimental condition %s will be saved at %s', expCondSepName, resDir))
resDir                <- paste(sprintf('%s/expCond_%s', resDir, expCondSepName ))
if (!dir.exists(resDir)) dir.create(resDir)
## --------------------------------------------
if (newAnnotation) {
## Assign cell type identity to clusters
## redefine the level of Idents on the y-axis can be adjusted here by inputting order for cell annotation
source(as.character(newAnnotationRscriptName))
} else {
if (clusterReOrder) {
Idents(seuratObjFinal) <- factor(levels(Idents(seuratObjFinal)), levels = as.character(reorderedClusters))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
}
# ## --------------------------------------------
# if (expCondSepName == 'A') {
#   expCondName2change = expCondName2change
#   # expCondName2change = '3041|3043|3061|3203|3295|3296|3369|3391' ## replace with levels of condition B (patient No.) for FT
#   # expCondName2change = '3041|3061|3203|3296|3391' ## replace with levels of condition B (patient No.) for Ovary
# } else if (expCondSepName == 'B') {
#   expCondName2change = expCondName2change
#   # expCondName2change = 'A|F|I' ## replace with levels of condition A (tissue type) for FT
#   # expCondName2change = 'O' ## replace with levels of condition A (tissue type) for Ovary, only 1 level no need to use, the same as 'org'
# } else {
#   expCondName2change = expCondName2change
# }
## --------------------------------------------
if (expCondSepName == 'org') {
seuratObjFinal        <- seuratObjFinal
} else {
seuratObjFinal@meta.data$expCond <- gsub(pattern = as.character(expCondName2change), replacement = '', x = seuratObjFinal@meta.data$expCond)
}
## updated expCond factor after above updating
expCondLevels           <- levels(factor(seuratObjFinal@meta.data$expCond))
## --------------------------------------------
Seurat::DefaultAssay(seuratObjFinal) <- "integrated"
expCondPosMarkers       <- list()
expCondSigPosMarkers    <- list()
for (l in 1:length(expCondLevels)) {
# Seurat::DefaultAssay(seuratObjFinal)   <- "RNA"
## ---
systime1              <- Sys.time()
## update 'resDir' to ceate dir under 'result_wNewAnnotation' or 'results_wOrgClusterAnnotation'
expCondLevel          <- expCondLevels[l]
## subsetting different experimental conditions
seuratObjFinalexpCond <- subset(seuratObjFinal, expCond == expCondLevel)
## identify cluster positively expressed markers
print(sprintf('Start %s: finding positive regulated cluster marker genes for experimental condition: %s', l, expCondLevel))
allPosMarkers         <- FindAllMarkers(seuratObjFinalexpCond, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
write.table(x = allPosMarkers, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_full.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = T, col.names = NA)
print(sprintf('Maximum p_value is %s, Maximum adjusted p_value is %s', round(max(allPosMarkers$p_val), digits = 4), round(max(allPosMarkers$p_val_adj), digits = 4)))
## identify significant positively expressed cluster markers
allPosMarkersAdjSig   <- allPosMarkers %>% dplyr::filter(p_val_adj <= pAdjValCutoff) %>% dplyr::mutate(perDiff = pct.1-pct.2)
if (dim(allPosMarkersAdjSig)[1] > 0) write.table(x = allPosMarkersAdjSig, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = T, col.names = NA)
print(sprintf('A total of %s positively expressed genes identified for experimental condition %s at %s, among them %s are significant up expressed at adjusted p-value significant level of %s', dim(allPosMarkers)[1], expCondSepName, expCondLevel, dim(allPosMarkersAdjSig)[1], pAdjValCutoff ))
## summarize the no. of significant positively expressed cluster markers
allPosMarkersAdjSigNo <- allPosMarkersAdjSig %>% dplyr::group_by(cluster) %>% dplyr::distinct() %>% dplyr::summarise('geneNo' = n()) %>% as.data.frame()
write.table(x = allPosMarkersAdjSigNo, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig_NoSummary.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = F, col.names = T)
## -
expCondPosMarkers[[l]]     <- allPosMarkers
expCondSigPosMarkers[[l]]  <- allPosMarkersAdjSig
systime2               <- Sys.time()
print(sprintf('END %s: finding positive regulated cluster marker genes for experimental condition in %s with computation time: %s %s.', l, expCondLevel, round(difftime(systime2, systime1), digits = 2), attr(difftime(systime2, systime1), "units") ))
print('Start: Step 6 making cluster marker genes heatmap plot')
## top N markers identification
topMarkers             <- allPosMarkers %>% group_by(cluster) %>% top_n(n = topNo, wt = avg_log2FC) %>% as.data.frame()
write.table(x = topMarkers, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_top%s.txt', resDir, expCondSepName, expCondLevel, topNo )), quote = F, sep = '\t', row.names = T, col.names = NA)
# Seurat::DefaultAssay(seuratObjFinalexpCond) <- "integrated"
## top N markers heatmap
cluterTopMarkerheatmap <- DoHeatmap(seuratObjFinalexpCond, features = topMarkers$gene)
pdf(file = file.path(sprintf('%s/expCond_%s_%s_allCluster_top%sPosMarkers_heatmap.pdf', resDir, expCondSepName, expCondLevel, topNo )), width = 25, height = 20)
print(cluterTopMarkerheatmap)
dev.off()
print(sprintf('complete top %s cluster marker genes heatmap plot', topNo))
## all significant cluster markers heatmap
cluterAllsigMarkerheatmap <- DoHeatmap(seuratObjFinalexpCond, features = allPosMarkersAdjSig$gene)
pdf(file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig_heatmap.pdf', resDir, expCondSepName, expCondLevel )), width = 25, height = 20)
print(cluterAllsigMarkerheatmap)
dev.off()
print('END: Step 6 making cluster marker genes heatmap plot')
print('********************')
## ---
}
names(expCondPosMarkers)    <- expCondLevels
names(expCondSigPosMarkers) <- expCondLevels
## --------------------------------------------
return(list('expCondPosMarkers' = expCondPosMarkers, 'expCondSigPosMarkers' = expCondSigPosMarkers))
## -------------------------------------------------------------------------------------
}
ovaryExpCondClusterResOrgReorder <- getExpCondClusterMarkers(resDir = integrateResDir2, newAnnotation = 'F',
clusterReOrder = 'T', reorderedClusters = reorderedClusters2,
expCondSepName = 'tissueSep', expCondName2change = '3041|3061|3203|3296|3391',
pAdjValCutoff = 0.05, topNo = 10 )
print(table(Idents(seuratObjFinal)))
if (clusterReOrder) {
Idents(seuratObjFinal) <- factor(levels(Idents(seuratObjFinal)), levels = as.character(reorderedClusters))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
seuratObjFinal          <<- readRDS(file = as.character(rdsFname))
Idents(seuratObjFinal)
seuratObjFinal@active.ident
seuratObjFinal2 <- seuratObjFinal
seuratObjFinal2@active.ident <- factor(seuratObjFinal2@active.ident, levels = reorderedClusters)
seuratObjFinal2
seuratObjFinal2@active.ident
table(seuratObjFinal2@active.ident)
table()
table(Idents(seuratObjFinal2))
seuratObjFinal3 = seuratObjFinal
Idents(seuratObjFinal3) <- factor(Idents(seuratObjFinal3), levels = as.character(reorderedClusters))
print(table(Idents(seuratObjFinal)))
print(table(Idents(seuratObjFinal2)))
print(table(Idents(seuratObjFinal3)))
#' @importFrom dplyr summarise
#' @importFrom grDevices dev.off
#' @importFrom grDevices pdf
#'
#' @keywords getExpCondClusterMarkers
#' @examples getExpCondClusterMarkers()
#' @export
#' @return
#' a list item including 3 elements:
## -------------------------------------------------------------------------------------- ##
getExpCondClusterMarkers <- function(resDir, newAnnotation, newAnnotationRscriptName, clusterReOrder, reorderedClusters, expCondSepName, expCondName2change, pAdjValCutoff, topNo) {
options(java.parameters = "-Xmx32000m")
if (missing(topNo)) topNo = 10
if (missing(clusterReOrder)) clusterReOrder = as.logical(F)
if (missing(reorderedClusters)) reorderedClusters <- ''
if (clusterReOrder) {
if (length(reorderedClusters)!=length(levels(Idents(seuratObjFinal)))) stop("Please provide corresponding reorderedClusters options")
}
## --------------------------------------------
rdsFname                <- paste(resDir, "RDS_Dir/analysis_results_integration_results.rds", sep = '/' )
# print(sprintf('85858 rdsFname is %s', rdsFname))
if (!file.exists(rdsFname)) stop("Please execute getClusterMarker() to conduct integration analysis before running getClusterSummaryReplot().")
seuratObjFinal          <<- readRDS(file = as.character(rdsFname))
print('Done for RDS readin')
## ------
## update results directory if new annotation is used
if (newAnnotation) {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wNewAnnotation', sep = '/')
} else {
if (clusterReOrder) {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wOrgClusterAnnotation_Reorder', sep = '/')
} else {
resDir <- paste(resDir, 'clusterMarkerGenes_results_wOrgClusterAnnotation', sep = '/')
}
}
if (!dir.exists(resDir)) dir.create(resDir)
print(sprintf('Cluster marker genes identification on cell clusters with respect experimental condition %s will be saved at %s', expCondSepName, resDir))
resDir                <- paste(sprintf('%s/expCond_%s', resDir, expCondSepName ))
if (!dir.exists(resDir)) dir.create(resDir)
## --------------------------------------------
if (newAnnotation) {
## Assign cell type identity to clusters
## redefine the level of Idents on the y-axis can be adjusted here by inputting order for cell annotation
source(as.character(newAnnotationRscriptName))
} else {
if (clusterReOrder) {
# seuratObjFinal2@active.ident <- factor(seuratObjFinal2@active.ident, levels = reorderedClusters)
Idents(seuratObjFinal) <- factor(Idents(seuratObjFinal), levels = as.character(reorderedClusters))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
}
# ## --------------------------------------------
# if (expCondSepName == 'A') {
#   expCondName2change = expCondName2change
#   # expCondName2change = '3041|3043|3061|3203|3295|3296|3369|3391' ## replace with levels of condition B (patient No.) for FT
#   # expCondName2change = '3041|3061|3203|3296|3391' ## replace with levels of condition B (patient No.) for Ovary
# } else if (expCondSepName == 'B') {
#   expCondName2change = expCondName2change
#   # expCondName2change = 'A|F|I' ## replace with levels of condition A (tissue type) for FT
#   # expCondName2change = 'O' ## replace with levels of condition A (tissue type) for Ovary, only 1 level no need to use, the same as 'org'
# } else {
#   expCondName2change = expCondName2change
# }
## --------------------------------------------
if (expCondSepName == 'org') {
seuratObjFinal        <- seuratObjFinal
} else {
seuratObjFinal@meta.data$expCond <- gsub(pattern = as.character(expCondName2change), replacement = '', x = seuratObjFinal@meta.data$expCond)
}
## updated expCond factor after above updating
expCondLevels           <- levels(factor(seuratObjFinal@meta.data$expCond))
## --------------------------------------------
Seurat::DefaultAssay(seuratObjFinal) <- "integrated"
expCondPosMarkers       <- list()
expCondSigPosMarkers    <- list()
for (l in 1:length(expCondLevels)) {
# Seurat::DefaultAssay(seuratObjFinal)   <- "RNA"
## ---
systime1              <- Sys.time()
## update 'resDir' to ceate dir under 'result_wNewAnnotation' or 'results_wOrgClusterAnnotation'
expCondLevel          <- expCondLevels[l]
## subsetting different experimental conditions
seuratObjFinalexpCond <- subset(seuratObjFinal, expCond == expCondLevel)
## identify cluster positively expressed markers
print(sprintf('Start %s: finding positive regulated cluster marker genes for experimental condition: %s', l, expCondLevel))
allPosMarkers         <- FindAllMarkers(seuratObjFinalexpCond, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
write.table(x = allPosMarkers, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_full.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = T, col.names = NA)
print(sprintf('Maximum p_value is %s, Maximum adjusted p_value is %s', round(max(allPosMarkers$p_val), digits = 4), round(max(allPosMarkers$p_val_adj), digits = 4)))
## identify significant positively expressed cluster markers
allPosMarkersAdjSig   <- allPosMarkers %>% dplyr::filter(p_val_adj <= pAdjValCutoff) %>% dplyr::mutate(perDiff = pct.1-pct.2)
if (dim(allPosMarkersAdjSig)[1] > 0) write.table(x = allPosMarkersAdjSig, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = T, col.names = NA)
print(sprintf('A total of %s positively expressed genes identified for experimental condition %s at %s, among them %s are significant up expressed at adjusted p-value significant level of %s', dim(allPosMarkers)[1], expCondSepName, expCondLevel, dim(allPosMarkersAdjSig)[1], pAdjValCutoff ))
## summarize the no. of significant positively expressed cluster markers
allPosMarkersAdjSigNo <- allPosMarkersAdjSig %>% dplyr::group_by(cluster) %>% dplyr::distinct() %>% dplyr::summarise('geneNo' = n()) %>% as.data.frame()
write.table(x = allPosMarkersAdjSigNo, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig_NoSummary.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = F, col.names = T)
## -
expCondPosMarkers[[l]]     <- allPosMarkers
expCondSigPosMarkers[[l]]  <- allPosMarkersAdjSig
systime2               <- Sys.time()
print(sprintf('END %s: finding positive regulated cluster marker genes for experimental condition in %s with computation time: %s %s.', l, expCondLevel, round(difftime(systime2, systime1), digits = 2), attr(difftime(systime2, systime1), "units") ))
print('Start: Step 6 making cluster marker genes heatmap plot')
## top N markers identification
topMarkers             <- allPosMarkers %>% group_by(cluster) %>% top_n(n = topNo, wt = avg_log2FC) %>% as.data.frame()
write.table(x = topMarkers, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_top%s.txt', resDir, expCondSepName, expCondLevel, topNo )), quote = F, sep = '\t', row.names = T, col.names = NA)
# Seurat::DefaultAssay(seuratObjFinalexpCond) <- "integrated"
## top N markers heatmap
cluterTopMarkerheatmap <- DoHeatmap(seuratObjFinalexpCond, features = topMarkers$gene)
pdf(file = file.path(sprintf('%s/expCond_%s_%s_allCluster_top%sPosMarkers_heatmap.pdf', resDir, expCondSepName, expCondLevel, topNo )), width = 25, height = 20)
print(cluterTopMarkerheatmap)
dev.off()
print(sprintf('complete top %s cluster marker genes heatmap plot', topNo))
## all significant cluster markers heatmap
cluterAllsigMarkerheatmap <- DoHeatmap(seuratObjFinalexpCond, features = allPosMarkersAdjSig$gene)
pdf(file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig_heatmap.pdf', resDir, expCondSepName, expCondLevel )), width = 25, height = 20)
print(cluterAllsigMarkerheatmap)
dev.off()
print('END: Step 6 making cluster marker genes heatmap plot')
print('********************')
## ---
}
names(expCondPosMarkers)    <- expCondLevels
names(expCondSigPosMarkers) <- expCondLevels
## --------------------------------------------
return(list('expCondPosMarkers' = expCondPosMarkers, 'expCondSigPosMarkers' = expCondSigPosMarkers))
## -------------------------------------------------------------------------------------
}
ovaryExpCondClusterResOrgReorder <- getExpCondClusterMarkers(resDir = integrateResDir2, newAnnotation = 'F',
clusterReOrder = 'T', reorderedClusters = reorderedClusters2,
expCondSepName = 'tissueSep', expCondName2change = '3041|3061|3203|3296|3391',
pAdjValCutoff = 0.05, topNo = 10 )
library(dplyr)
print(table(Idents(seuratObjFinal)))
## --------------------------------------------
if (newAnnotation) {
## Assign cell type identity to clusters
## redefine the level of Idents on the y-axis can be adjusted here by inputting order for cell annotation
source(as.character(newAnnotationRscriptName))
} else {
if (clusterReOrder) {
# seuratObjFinal2@active.ident <- factor(seuratObjFinal2@active.ident, levels = reorderedClusters)
Idents(seuratObjFinal) <- factor(Idents(seuratObjFinal), levels = as.character(reorderedClusters))
print('Identified cell clusters are re-ordered as below:')
} else {
print('Identified cell clusters are sorted as orginal below:')
}
print(table(Idents(seuratObjFinal)))
}
expCondSepName = 'tissueSep'
expCondName2change = '3041|3061|3203|3296|3391'
pAdjValCutoff = 0.05
topNo = 10
#   # expCondName2change = '3041|3043|3061|3203|3295|3296|3369|3391' ## replace with levels of condition B (patient No.) for FT
#   # expCondName2change = '3041|3061|3203|3296|3391' ## replace with levels of condition B (patient No.) for Ovary
# } else if (expCondSepName == 'B') {
#   expCondName2change = expCondName2change
#   # expCondName2change = 'A|F|I' ## replace with levels of condition A (tissue type) for FT
#   # expCondName2change = 'O' ## replace with levels of condition A (tissue type) for Ovary, only 1 level no need to use, the same as 'org'
# } else {
#   expCondName2change = expCondName2change
# }
## --------------------------------------------
if (expCondSepName == 'org') {
seuratObjFinal        <- seuratObjFinal
} else {
seuratObjFinal@meta.data$expCond <- gsub(pattern = as.character(expCondName2change), replacement = '', x = seuratObjFinal@meta.data$expCond)
}
## updated expCond factor after above updating
expCondLevels           <- levels(factor(seuratObjFinal@meta.data$expCond))
## --------------------------------------------
Seurat::DefaultAssay(seuratObjFinal) <- "integrated"
expCondPosMarkers       <- list()
expCondSigPosMarkers    <- list()
length(expCondLevels)
l =1
# Seurat::DefaultAssay(seuratObjFinal)   <- "RNA"
## ---
systime1              <- Sys.time()
## update 'resDir' to ceate dir under 'result_wNewAnnotation' or 'results_wOrgClusterAnnotation'
expCondLevel          <- expCondLevels[l]
## subsetting different experimental conditions
seuratObjFinalexpCond <- subset(seuratObjFinal, expCond == expCondLevel)
## identify cluster positively expressed markers
print(sprintf('Start %s: finding positive regulated cluster marker genes for experimental condition: %s', l, expCondLevel))
allPosMarkers         <- FindAllMarkers(seuratObjFinalexpCond, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25)
write.table(x = allPosMarkers, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_full.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = T, col.names = NA)
print(sprintf('Maximum p_value is %s, Maximum adjusted p_value is %s', round(max(allPosMarkers$p_val), digits = 4), round(max(allPosMarkers$p_val_adj), digits = 4)))
## identify significant positively expressed cluster markers
allPosMarkersAdjSig   <- allPosMarkers %>% dplyr::filter(p_val_adj <= pAdjValCutoff) %>% dplyr::mutate(perDiff = pct.1-pct.2)
if (dim(allPosMarkersAdjSig)[1] > 0) write.table(x = allPosMarkersAdjSig, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = T, col.names = NA)
print(sprintf('A total of %s positively expressed genes identified for experimental condition %s at %s, among them %s are significant up expressed at adjusted p-value significant level of %s', dim(allPosMarkers)[1], expCondSepName, expCondLevel, dim(allPosMarkersAdjSig)[1], pAdjValCutoff ))
## summarize the no. of significant positively expressed cluster markers
allPosMarkersAdjSigNo <- allPosMarkersAdjSig %>% dplyr::group_by(cluster) %>% dplyr::distinct() %>% dplyr::summarise('geneNo' = n()) %>% as.data.frame()
write.table(x = allPosMarkersAdjSigNo, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_UpSig_NoSummary.txt', resDir, expCondSepName, expCondLevel)), quote = F, sep = '\t', row.names = F, col.names = T)
## -
expCondPosMarkers[[l]]     <- allPosMarkers
expCondSigPosMarkers[[l]]  <- allPosMarkersAdjSig
systime2               <- Sys.time()
print(sprintf('END %s: finding positive regulated cluster marker genes for experimental condition in %s with computation time: %s %s.', l, expCondLevel, round(difftime(systime2, systime1), digits = 2), attr(difftime(systime2, systime1), "units") ))
print('Start: Step 6 making cluster marker genes heatmap plot')
## top N markers identification
topMarkers             <- allPosMarkers %>% group_by(cluster) %>% top_n(n = topNo, wt = avg_log2FC) %>% as.data.frame()
write.table(x = topMarkers, file = file.path(sprintf('%s/expCond_%s_%s_allCluster_pos_markers_top%s.txt', resDir, expCondSepName, expCondLevel, topNo )), quote = F, sep = '\t', row.names = T, col.names = NA)
# Seurat::DefaultAssay(seuratObjFinalexpCond) <- "integrated"
## top N markers heatmap
cluterTopMarkerheatmap <- DoHeatmap(seuratObjFinalexpCond, features = topMarkers$gene)
pdf(file = file.path(sprintf('%s/expCond_%s_%s_allCluster_top%sPosMarkers_heatmap.pdf', resDir, expCondSepName, expCondLevel, topNo )), width = 25, height = 20)
print(cluterTopMarkerheatmap)
dev.off()
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(Seurat)
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
library(devtools)
document()
document()
setwd('..')
install('scRICA')
library(devtools)
document()
document()
setwd('..')
install('scRICA/')
rdsFname       <- '/Users/yanli/Desktop/757_scRNA-seq/integrate_batch2sample3296_ovary.rds'
seuratFinalObj <- readRDS(file = as.character(rdsFname))
currentDir          <- '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration'
# currentDir          <- '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration'
## ---------------------------------------------------------------------------------------
# ?getClusterSummaryReplot ##where resDir iw where integration results were saved, can also be obtained from 'seuratIntegratedRes$resDir'
integrateResDir     <- paste(currentDir, 'batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results', sep = '/')
rdsFname <- integrateResDir
seuratFinalObj <- readRDS(file = as.character(rdsFname))
integrateResDir
rdsFname <- '/Users/yanli/Desktop/757_scRNA-seq/scRICA_results/scRICA_batch34_33693391_integration/batch34_3369_3391_integration_rm3295A_fallopian_results/analysis_results_integration_results/RDS_Dir/analysis_results_integration_results.rds'
seuratFinalObj <- readRDS(file = as.character(rdsFname))
seuratFinalObj
seuratFinalObj@assays$RNA
seuratFinalObj@assays$integrated
seuratFinalObj@assays$integrated@counts
seuratFinalObj@assays$integrated@data
str(seuratFinalObj@assays$integrated@data)
str(seuratFinalObj@assays$RNA@data)
str(seuratFinalObj@assays$RNA@counts)
str(seuratFinalObj@assays$integrated@counts)
library(Seurat)
DotPlot
FetchData
FeaturePlot
?FetchData
FetchData
seuratFinalObj@assays
seuratFinalObj@assays$integrated
seuratFinalObj@assays$integrated@var.features
length(seuratFinalObj@assays$integrated@var.features)
length(seuratFinalObj@assays$RNA@var.features)
length(seuratFinalObj@assays$RNA@var.features)
length(seuratFinalObj@assays$RNA@data)
dim(seuratFinalObj@assays$RNA@data)
dim(seuratFinalObj@assays$integrated@data)
head(seuratFinalObj@assays$integrated@data)
head(seuratFinalObj@assays$integrated@data[,1:3])
head(seuratFinalObj@assays$RNA@data[,1:3])
head(seuratFinalObj@assays$integrated@scale.data[,1:3])
FetchData
UpdateSlots(object = seuratFinalObj)
colnames(seuratFinalObj)
length(colnames(seuratFinalObj))
FetchData
?inherits
?lkey
?key
Key
?Key
Key(seuratFinalObj)
library(Seurat)
?FindMarkers
?FindConservedMarkers
library(DobuletDecon)
library(DoubletDecon)
?Main_Doublet_Decon
?scater::runPCA
system.file('extdata', 'metadata.txt', package = 'scRICA', mustWork = T)
list.files(system.file('extdata', package = 'scRICA', mustWork = T))
metadata                <- read.delim2(file = system.file('extdata', 'metadata.txt', package = 'scRICA', mustWork = T), header = T)
head(metadata)
list.files(system.file('extdata', package = 'scRICA', mustWork = T))
system.file('extdata', package = 'scRICA', mustWork = T)
